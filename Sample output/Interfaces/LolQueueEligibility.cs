//Auto-generated by https://github.com/pipe01/lcu-api-generator
using GlassLCU.API.Models;
using System.Threading.Tasks;
using static GlassLCU.API.GenerationUtils;
using System.Reflection;

namespace GlassLCU.API.Interfaces
{
    public static class LolQueueEligibility
    {
        /// <summary>
        /// <para>POST /lol-queue-eligibility/v1/eligibility</para>
        /// </summary>
        [Endpoint("/lol-queue-eligibility/v1/eligibility")]
        public static Task<LolQueueEligibilityEligibility[]> PostLolQueueEligibilityV1Eligibility([Parameter("eligibilityQueryParam", "body")] LolQueueEligibilityEligibilityQueryParams eligibilityQueryParam)
            => Sender.Request<LolQueueEligibilityEligibility[]>("post", $"/lol-queue-eligibility/v1/eligibility", eligibilityQueryParam);
        /// <summary>
        /// <para>GET /lol-queue-eligibility/v1/initial-configuration-complete</para>
        /// </summary>
        [Endpoint("/lol-queue-eligibility/v1/initial-configuration-complete")]
        public static Task<bool> GetLolQueueEligibilityV1InitialConfigurationComplete()
            => Sender.Request<bool>("get", $"/lol-queue-eligibility/v1/initial-configuration-complete");
        /// <summary>
        /// <para>POST /lol-queue-eligibility/v2/eligibility</para>
        /// </summary>
        [Endpoint("/lol-queue-eligibility/v2/eligibility")]
        public static Task<LolQueueEligibilityEligibility[]> PostLolQueueEligibilityV2Eligibility([Parameter("eligibilityQueryParam", "body")] LolQueueEligibilityEligibilityQueryParams eligibilityQueryParam)
            => Sender.Request<LolQueueEligibilityEligibility[]>("post", $"/lol-queue-eligibility/v2/eligibility", eligibilityQueryParam);
        /// <summary>
        /// <para>GET /lol-queue-eligibility/v3/custom</para>
        /// </summary>
        [Endpoint("/lol-queue-eligibility/v3/custom")]
        public static Task<LolQueueEligibilityEligibility[]> GetLolQueueEligibilityV3Custom([Parameter("teamSize", "query")] int teamSize, [Parameter("pickMode", "query")] string pickMode)
            => Sender.Request<LolQueueEligibilityEligibility[]>("get", $"/lol-queue-eligibility/v3/custom?teamSize={System.Net.WebUtility.UrlEncode(teamSize.ToString())}&pickMode={System.Net.WebUtility.UrlEncode(pickMode.ToString())}");
        /// <summary>
        /// <para>GET /lol-queue-eligibility/v3/eligibility</para>
        /// </summary>
        [Endpoint("/lol-queue-eligibility/v3/eligibility")]
        public static Task<LolQueueEligibilityEligibility[]> GetLolQueueEligibilityV3Eligibility([Parameter("summonerIds", "query")] long[] summonerIds, [Parameter("queueIds", "query")] int[] queueIds)
            => Sender.Request<LolQueueEligibilityEligibility[]>("get", $"/lol-queue-eligibility/v3/eligibility?summonerIds={System.Net.WebUtility.UrlEncode(summonerIds.ToString())}&queueIds={System.Net.WebUtility.UrlEncode(queueIds.ToString())}");

        public static string GetURL(string methodName)
        {
            return typeof(LolQueueEligibility).GetMethod(methodName).GetCustomAttribute<EndpointAttribute>().URL;
        }
    }
}
