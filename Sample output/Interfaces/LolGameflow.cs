//Auto-generated by https://github.com/pipe01/lcu-api-generator
using GlassLCU.API.Models;
using System.Threading.Tasks;
using static GlassLCU.API.GenerationUtils;
using System.Reflection;

namespace GlassLCU.API.Interfaces
{
    public static class LolGameflow
    {
        /// <summary>
        /// <para>POST /lol-gameflow/v1/ack-failed-to-launch</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/ack-failed-to-launch")]
        public static Task PostLolGameflowV1AckFailedToLaunch()
            => Sender.Request("post", $"/lol-gameflow/v1/ack-failed-to-launch");
        /// <summary>
        /// <para>GET /lol-gameflow/v1/active-patcher-lock</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/active-patcher-lock")]
        public static Task<bool> GetLolGameflowV1ActivePatcherLock()
            => Sender.Request<bool>("get", $"/lol-gameflow/v1/active-patcher-lock");
        /// <summary>
        /// <para>GET /lol-gameflow/v1/availability</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/availability")]
        public static Task<LolGameflowGameflowAvailability> GetLolGameflowV1Availability()
            => Sender.Request<LolGameflowGameflowAvailability>("get", $"/lol-gameflow/v1/availability");
        /// <summary>
        /// <para>GET /lol-gameflow/v1/basic-tutorial</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/basic-tutorial")]
        public static Task<bool> GetLolGameflowV1BasicTutorial()
            => Sender.Request<bool>("get", $"/lol-gameflow/v1/basic-tutorial");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/basic-tutorial/start</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/basic-tutorial/start")]
        public static Task<object> PostLolGameflowV1BasicTutorialStart()
            => Sender.Request<object>("post", $"/lol-gameflow/v1/basic-tutorial/start");
        /// <summary>
        /// <para>GET /lol-gameflow/v1/battle-training</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/battle-training")]
        public static Task<bool> GetLolGameflowV1BattleTraining()
            => Sender.Request<bool>("get", $"/lol-gameflow/v1/battle-training");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/battle-training/start</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/battle-training/start")]
        public static Task<object> PostLolGameflowV1BattleTrainingStart()
            => Sender.Request<object>("post", $"/lol-gameflow/v1/battle-training/start");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/battle-training/stop</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/battle-training/stop")]
        public static Task<object> PostLolGameflowV1BattleTrainingStop()
            => Sender.Request<object>("post", $"/lol-gameflow/v1/battle-training/stop");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/client-received-message</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/client-received-message")]
        public static Task PostLolGameflowV1ClientReceivedMessage([Parameter("messsage", "body")] string messsage)
            => Sender.Request("post", $"/lol-gameflow/v1/client-received-message", messsage);
        /// <summary>
        /// <para>GET /lol-gameflow/v1/extra-game-client-args</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/extra-game-client-args")]
        public static Task<string[]> GetLolGameflowV1ExtraGameClientArgs()
            => Sender.Request<string[]>("get", $"/lol-gameflow/v1/extra-game-client-args");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/extra-game-client-args</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/extra-game-client-args")]
        public static Task PostLolGameflowV1ExtraGameClientArgs([Parameter("extraGameClientArgs", "body")] string[] extraGameClientArgs)
            => Sender.Request("post", $"/lol-gameflow/v1/extra-game-client-args", extraGameClientArgs);
        /// <summary>
        /// <para>GET /lol-gameflow/v1/gameflow-metadata/player-status</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/gameflow-metadata/player-status")]
        public static Task<LolGameflowPlayerStatus> GetLolGameflowV1GameflowMetadataPlayerStatus()
            => Sender.Request<LolGameflowPlayerStatus>("get", $"/lol-gameflow/v1/gameflow-metadata/player-status");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/gameflow-metadata/player-status</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/gameflow-metadata/player-status")]
        public static Task PostLolGameflowV1GameflowMetadataPlayerStatus([Parameter("playerStatus", "body")] LolGameflowPlayerStatus playerStatus)
            => Sender.Request("post", $"/lol-gameflow/v1/gameflow-metadata/player-status", playerStatus);
        /// <summary>
        /// <para>GET /lol-gameflow/v1/gameflow-metadata/registration-status</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/gameflow-metadata/registration-status")]
        public static Task<LolGameflowRegistrationStatus> GetLolGameflowV1GameflowMetadataRegistrationStatus()
            => Sender.Request<LolGameflowRegistrationStatus>("get", $"/lol-gameflow/v1/gameflow-metadata/registration-status");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/gameflow-metadata/registration-status</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/gameflow-metadata/registration-status")]
        public static Task PostLolGameflowV1GameflowMetadataRegistrationStatus([Parameter("registrationStatus", "body")] LolGameflowRegistrationStatus registrationStatus)
            => Sender.Request("post", $"/lol-gameflow/v1/gameflow-metadata/registration-status", registrationStatus);
        /// <summary>
        /// <para>GET /lol-gameflow/v1/gameflow-phase</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/gameflow-phase")]
        public static Task<LolGameflowGameflowPhase> GetLolGameflowV1GameflowPhase()
            => Sender.Request<LolGameflowGameflowPhase>("get", $"/lol-gameflow/v1/gameflow-phase");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/pre-end-game-transition</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/pre-end-game-transition")]
        public static Task PostLolGameflowV1PreEndGameTransition([Parameter("enabled", "query")] bool enabled)
            => Sender.Request("post", $"/lol-gameflow/v1/pre-end-game-transition?enabled={System.Net.WebUtility.UrlEncode(enabled.ToString())}");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/reconnect</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/reconnect")]
        public static Task<object> PostLolGameflowV1Reconnect()
            => Sender.Request<object>("post", $"/lol-gameflow/v1/reconnect");
        /// <summary>
        /// <para>GET /lol-gameflow/v1/session</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/session")]
        public static Task<LolGameflowGameflowSession> GetLolGameflowV1Session()
            => Sender.Request<LolGameflowGameflowSession>("get", $"/lol-gameflow/v1/session");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/session/dodge</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/session/dodge")]
        public static Task PostLolGameflowV1SessionDodge([Parameter("dodgeData", "body")] LolGameflowGameflowGameDodge dodgeData)
            => Sender.Request("post", $"/lol-gameflow/v1/session/dodge", dodgeData);
        /// <summary>
        /// <para>POST /lol-gameflow/v1/session/event</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/session/event")]
        public static Task PostLolGameflowV1SessionEvent([Parameter("session", "body")] string session)
            => Sender.Request("post", $"/lol-gameflow/v1/session/event", session);
        /// <summary>
        /// <para>POST /lol-gameflow/v1/session/game-configuration</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/session/game-configuration")]
        public static Task PostLolGameflowV1SessionGameConfiguration([Parameter("queue", "body")] LolGameflowQueue queue)
            => Sender.Request("post", $"/lol-gameflow/v1/session/game-configuration", queue);
        /// <summary>
        /// <para>POST /lol-gameflow/v1/session/request-enter-gameflow</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/session/request-enter-gameflow")]
        public static Task<bool> PostLolGameflowV1SessionRequestEnterGameflow([Parameter("eventType", "body")] string eventType)
            => Sender.Request<bool>("post", $"/lol-gameflow/v1/session/request-enter-gameflow", eventType);
        /// <summary>
        /// <para>POST /lol-gameflow/v1/session/request-lobby</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/session/request-lobby")]
        public static Task<bool> PostLolGameflowV1SessionRequestLobby()
            => Sender.Request<bool>("post", $"/lol-gameflow/v1/session/request-lobby");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/session/request-tournament-checkin</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/session/request-tournament-checkin")]
        public static Task<bool> PostLolGameflowV1SessionRequestTournamentCheckin()
            => Sender.Request<bool>("post", $"/lol-gameflow/v1/session/request-tournament-checkin");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/session/tournament-ended</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/session/tournament-ended")]
        public static Task PostLolGameflowV1SessionTournamentEnded()
            => Sender.Request("post", $"/lol-gameflow/v1/session/tournament-ended");
        /// <summary>
        /// <para>GET /lol-gameflow/v1/spectate</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/spectate")]
        public static Task<bool> GetLolGameflowV1Spectate()
            => Sender.Request<bool>("get", $"/lol-gameflow/v1/spectate");
        /// <summary>
        /// <para>GET /lol-gameflow/v1/spectate/delayed-launch</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/spectate/delayed-launch")]
        public static Task GetLolGameflowV1SpectateDelayedLaunch()
            => Sender.Request("get", $"/lol-gameflow/v1/spectate/delayed-launch");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/spectate/launch</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/spectate/launch")]
        public static Task<object> PostLolGameflowV1SpectateLaunch([Parameter("summonerName", "body")] string summonerName = default)
            => Sender.Request<object>("post", $"/lol-gameflow/v1/spectate/launch", summonerName);
        /// <summary>
        /// <para>POST /lol-gameflow/v1/spectate/quit</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/spectate/quit")]
        public static Task<object> PostLolGameflowV1SpectateQuit()
            => Sender.Request<object>("post", $"/lol-gameflow/v1/spectate/quit");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/tick</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/tick")]
        public static Task PostLolGameflowV1Tick()
            => Sender.Request("post", $"/lol-gameflow/v1/tick");
        /// <summary>
        /// <para>GET /lol-gameflow/v1/watch</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/watch")]
        public static Task<LolGameflowGameflowWatchPhase> GetLolGameflowV1Watch()
            => Sender.Request<LolGameflowGameflowWatchPhase>("get", $"/lol-gameflow/v1/watch");
        /// <summary>
        /// <para>POST /lol-gameflow/v1/watch/launch</para>
        /// </summary>
        [Endpoint("/lol-gameflow/v1/watch/launch")]
        public static Task<object> PostLolGameflowV1WatchLaunch([Parameter("args", "body")] string[] args)
            => Sender.Request<object>("post", $"/lol-gameflow/v1/watch/launch", args);

        public static string GetURL(string methodName)
        {
            return typeof(LolGameflow).GetMethod(methodName).GetCustomAttribute<EndpointAttribute>().URL;
        }
    }
}
