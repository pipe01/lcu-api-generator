//Auto-generated by https://github.com/pipe01/lcu-api-generator
using GlassLCU.API.Models;
using System.Threading.Tasks;
using static GlassLCU.API.GenerationUtils;
using System.Reflection;

namespace GlassLCU.API.Interfaces
{
    public static class LolLoot
    {
        /// <summary>
        /// <para>GET /lol-loot/v1/currency-configuration</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/currency-configuration")]
        public static Task GetLolLootV1CurrencyConfiguration()
            => Sender.Request("get", $"/lol-loot/v1/currency-configuration");
        /// <summary>
        /// <para>GET /lol-loot/v1/enabled</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/enabled")]
        public static Task<bool> GetLolLootV1Enabled()
            => Sender.Request<bool>("get", $"/lol-loot/v1/enabled");
        /// <summary>
        /// <para>GET /lol-loot/v1/loot-grants</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/loot-grants")]
        public static Task<LolLootLootGrantNotification[]> GetLolLootV1LootGrants()
            => Sender.Request<LolLootLootGrantNotification[]>("get", $"/lol-loot/v1/loot-grants");
        /// <summary>
        /// <para>DELETE /lol-loot/v1/loot-grants/{id}</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/loot-grants/{id}")]
        public static Task<object> DeleteLolLootV1LootGrantsById([Parameter("id", "path")] long id)
            => Sender.Request<object>("delete", $"/lol-loot/v1/loot-grants/{id}");
        /// <summary>
        /// <para>GET /lol-loot/v1/loot-items</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/loot-items")]
        public static Task<LolLootLootItem[]> GetLolLootV1LootItems()
            => Sender.Request<LolLootLootItem[]>("get", $"/lol-loot/v1/loot-items");
        /// <summary>
        /// <para>GET /lol-loot/v1/new-player-check-done</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/new-player-check-done")]
        public static Task<bool> GetLolLootV1NewPlayerCheckDone()
            => Sender.Request<bool>("get", $"/lol-loot/v1/new-player-check-done");
        /// <summary>
        /// <para>POST /lol-loot/v1/new-player-check-done/{newValue}</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/new-player-check-done/{newValue}")]
        public static Task<string> PostLolLootV1NewPlayerCheckDoneByNewValue([Parameter("newValue", "path")] bool newValue)
            => Sender.Request<string>("post", $"/lol-loot/v1/new-player-check-done/{newValue}");
        /// <summary>
        /// <para>GET /lol-loot/v1/player-display-categories</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/player-display-categories")]
        public static Task<string[]> GetLolLootV1PlayerDisplayCategories()
            => Sender.Request<string[]>("get", $"/lol-loot/v1/player-display-categories");
        /// <summary>
        /// <para>GET /lol-loot/v1/player-loot</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/player-loot")]
        public static Task<LolLootPlayerLoot[]> GetLolLootV1PlayerLoot()
            => Sender.Request<LolLootPlayerLoot[]>("get", $"/lol-loot/v1/player-loot");
        /// <summary>
        /// <para>GET /lol-loot/v1/player-loot-map</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/player-loot-map")]
        public static Task<object> GetLolLootV1PlayerLootMap()
            => Sender.Request<object>("get", $"/lol-loot/v1/player-loot-map");
        /// <summary>
        /// <para>GET /lol-loot/v1/player-loot-notifications</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/player-loot-notifications")]
        public static Task<LolLootPlayerLootNotification[]> GetLolLootV1PlayerLootNotifications()
            => Sender.Request<LolLootPlayerLootNotification[]>("get", $"/lol-loot/v1/player-loot-notifications");
        /// <summary>
        /// <para>POST /lol-loot/v1/player-loot-notifications/{id}/acknowledge</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/player-loot-notifications/{id}/acknowledge")]
        public static Task<string> PostLolLootV1PlayerLootNotificationsByIdAcknowledge([Parameter("id", "path")] string id)
            => Sender.Request<string>("post", $"/lol-loot/v1/player-loot-notifications/{id}/acknowledge");
        /// <summary>
        /// <para>GET /lol-loot/v1/player-loot/{lootId}</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/player-loot/{lootId}")]
        public static Task<LolLootPlayerLoot> GetLolLootV1PlayerLootByLootId([Parameter("lootId", "path")] string lootId)
            => Sender.Request<LolLootPlayerLoot>("get", $"/lol-loot/v1/player-loot/{lootId}");
        /// <summary>
        /// <para>GET /lol-loot/v1/player-loot/{lootId}/context-menu</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/player-loot/{lootId}/context-menu")]
        public static Task<LolLootContextMenu[]> GetLolLootV1PlayerLootByLootIdContextMenu([Parameter("lootId", "path")] string lootId)
            => Sender.Request<LolLootContextMenu[]>("get", $"/lol-loot/v1/player-loot/{lootId}/context-menu");
        /// <summary>
        /// <para>POST /lol-loot/v1/player-loot/{lootId}/context-menu</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/player-loot/{lootId}/context-menu")]
        public static Task<LolLootContextMenu[]> PostLolLootV1PlayerLootByLootIdContextMenu([Parameter("lootId", "path")] string lootId)
            => Sender.Request<LolLootContextMenu[]>("post", $"/lol-loot/v1/player-loot/{lootId}/context-menu");
        /// <summary>
        /// <para>DELETE /lol-loot/v1/player-loot/{lootId}/new-notification</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/player-loot/{lootId}/new-notification")]
        public static Task<object> DeleteLolLootV1PlayerLootByLootIdNewNotification([Parameter("lootId", "path")] string lootId)
            => Sender.Request<object>("delete", $"/lol-loot/v1/player-loot/{lootId}/new-notification");
        /// <summary>
        /// <para>POST /lol-loot/v1/player-loot/{lootName}/redeem</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/player-loot/{lootName}/redeem")]
        public static Task<LolLootPlayerLootUpdate> PostLolLootV1PlayerLootByLootNameRedeem([Parameter("lootName", "path")] string lootName)
            => Sender.Request<LolLootPlayerLootUpdate>("post", $"/lol-loot/v1/player-loot/{lootName}/redeem");
        /// <summary>
        /// <para>GET /lol-loot/v1/ready</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/ready")]
        public static Task<bool> GetLolLootV1Ready()
            => Sender.Request<bool>("get", $"/lol-loot/v1/ready");
        /// <summary>
        /// <para>GET /lol-loot/v1/recipes/configuration</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/recipes/configuration")]
        public static Task GetLolLootV1RecipesConfiguration()
            => Sender.Request("get", $"/lol-loot/v1/recipes/configuration");
        /// <summary>
        /// <para>GET /lol-loot/v1/recipes/initial-item/{lootId}</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/recipes/initial-item/{lootId}")]
        public static Task<LolLootRecipe[]> GetLolLootV1RecipesInitialItemByLootId([Parameter("lootId", "path")] string lootId)
            => Sender.Request<LolLootRecipe[]>("get", $"/lol-loot/v1/recipes/initial-item/{lootId}");
        /// <summary>
        /// <para>POST /lol-loot/v1/recipes/initial-item/{lootId}</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/recipes/initial-item/{lootId}")]
        public static Task<LolLootRecipe[]> PostLolLootV1RecipesInitialItemByLootId([Parameter("lootId", "path")] string lootId)
            => Sender.Request<LolLootRecipe[]>("post", $"/lol-loot/v1/recipes/initial-item/{lootId}");
        /// <summary>
        /// <para>POST /lol-loot/v1/recipes/{recipeName}/craft</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/recipes/{recipeName}/craft")]
        public static Task<LolLootPlayerLootUpdate> PostLolLootV1RecipesByRecipeNameCraft([Parameter("recipeName", "path")] string recipeName, [Parameter("playerLootList", "body")] string[] playerLootList, [Parameter("repeat", "query")] int repeat = default)
            => Sender.Request<LolLootPlayerLootUpdate>("post", $"/lol-loot/v1/recipes/{recipeName}/craft?{(repeat != default ? $"repeat={System.Net.WebUtility.UrlEncode(repeat.ToString())}" : null)}", playerLootList);
        /// <summary>
        /// <para>POST /lol-loot/v1/refresh</para>
        /// </summary>
        [Endpoint("/lol-loot/v1/refresh")]
        public static Task<string> PostLolLootV1Refresh([Parameter("force", "query")] bool force)
            => Sender.Request<string>("post", $"/lol-loot/v1/refresh?force={System.Net.WebUtility.UrlEncode(force.ToString())}");
        /// <summary>
        /// <para>GET /lol-loot/v2/player-loot-map</para>
        /// </summary>
        [Endpoint("/lol-loot/v2/player-loot-map")]
        public static Task<LolLootPlayerLootMap> GetLolLootV2PlayerLootMap()
            => Sender.Request<LolLootPlayerLootMap>("get", $"/lol-loot/v2/player-loot-map");

        public static string GetURL(string methodName)
        {
            return typeof(LolLoot).GetMethod(methodName).GetCustomAttribute<EndpointAttribute>().URL;
        }
    }
}
