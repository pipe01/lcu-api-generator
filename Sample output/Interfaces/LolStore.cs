//Auto-generated by https://github.com/pipe01/lcu-api-generator
using GlassLCU.API.Models;
using System.Threading.Tasks;
using static GlassLCU.API.GenerationUtils;
using System.Reflection;

namespace GlassLCU.API.Interfaces
{
    public static class LolStore
    {
        /// <summary>
        /// <para>GET /lol-store/v1/catalog</para>
        /// </summary>
        [Endpoint("/lol-store/v1/catalog")]
        public static Task<LolStoreCatalogItem[]> GetLolStoreV1Catalog([Parameter("inventoryType", "query")] string[] inventoryType = default, [Parameter("itemId", "query")] int[] itemId = default)
            => Sender.Request<LolStoreCatalogItem[]>("get", $"/lol-store/v1/catalog?{(inventoryType != default ? $"inventoryType={System.Net.WebUtility.UrlEncode(inventoryType.ToString())}" : null)}&{(itemId != default ? $"itemId={System.Net.WebUtility.UrlEncode(itemId.ToString())}" : null)}");
        /// <summary>
        /// <para>GET /lol-store/v1/getStoreUrl</para>
        /// </summary>
        [Endpoint("/lol-store/v1/getStoreUrl")]
        public static Task<string> GetLolStoreV1GetStoreUrl()
            => Sender.Request<string>("get", $"/lol-store/v1/getStoreUrl");
        /// <summary>
        /// <para>GET /lol-store/v1/giftablefriends</para>
        /// </summary>
        [Endpoint("/lol-store/v1/giftablefriends")]
        public static Task<LolStoreGiftingFriend[]> GetLolStoreV1Giftablefriends()
            => Sender.Request<LolStoreGiftingFriend[]>("get", $"/lol-store/v1/giftablefriends");
        /// <summary>
        /// <para>GET /lol-store/v1/lastPage</para>
        /// </summary>
        [Endpoint("/lol-store/v1/lastPage")]
        public static Task<string> GetLolStoreV1LastPage()
            => Sender.Request<string>("get", $"/lol-store/v1/lastPage");
        /// <summary>
        /// <para>POST /lol-store/v1/lastPage</para>
        /// </summary>
        [Endpoint("/lol-store/v1/lastPage")]
        public static Task PostLolStoreV1LastPage([Parameter("pageType", "body")] string pageType)
            => Sender.Request("post", $"/lol-store/v1/lastPage", pageType);
        /// <summary>
        /// <para>GET /lol-store/v1/login</para>
        /// </summary>
        [Endpoint("/lol-store/v1/login")]
        public static Task<object> GetLolStoreV1Login()
            => Sender.Request<object>("get", $"/lol-store/v1/login");
        /// <summary>
        /// <para>POST /lol-store/v1/notifications/acknowledge</para>
        /// </summary>
        [Endpoint("/lol-store/v1/notifications/acknowledge")]
        public static Task<object> PostLolStoreV1NotificationsAcknowledge([Parameter("id", "body")] string id)
            => Sender.Request<object>("post", $"/lol-store/v1/notifications/acknowledge", id);
        /// <summary>
        /// <para>GET /lol-store/v1/order-notifications</para>
        /// </summary>
        [Endpoint("/lol-store/v1/order-notifications")]
        public static Task<LolStoreOrderNotificationResource[]> GetLolStoreV1OrderNotifications()
            => Sender.Request<LolStoreOrderNotificationResource[]>("get", $"/lol-store/v1/order-notifications");
        /// <summary>
        /// <para>DELETE /lol-store/v1/order-notifications/{id}</para>
        /// </summary>
        [Endpoint("/lol-store/v1/order-notifications/{id}")]
        public static Task<object> DeleteLolStoreV1OrderNotificationsById([Parameter("id", "path")] long id)
            => Sender.Request<object>("delete", $"/lol-store/v1/order-notifications/{id}");
        /// <summary>
        /// <para>GET /lol-store/v1/order-notifications/{id}</para>
        /// </summary>
        [Endpoint("/lol-store/v1/order-notifications/{id}")]
        public static Task<LolStoreOrderNotificationResource> GetLolStoreV1OrderNotificationsById([Parameter("id", "path")] long id)
            => Sender.Request<LolStoreOrderNotificationResource>("get", $"/lol-store/v1/order-notifications/{id}");
        /// <summary>
        /// <para>GET /lol-store/v1/paymentDetails</para>
        /// </summary>
        [Endpoint("/lol-store/v1/paymentDetails")]
        public static Task<object> GetLolStoreV1PaymentDetails([Parameter("action", "query")] string action, [Parameter("giftRecipientAccountId", "query")] long giftRecipientAccountId = default, [Parameter("giftMessage", "query")] string giftMessage = default)
            => Sender.Request<object>("get", $"/lol-store/v1/paymentDetails?action={System.Net.WebUtility.UrlEncode(action.ToString())}&{(giftRecipientAccountId != default ? $"giftRecipientAccountId={System.Net.WebUtility.UrlEncode(giftRecipientAccountId.ToString())}" : null)}&{(giftMessage != default ? $"giftMessage={System.Net.WebUtility.UrlEncode(giftMessage.ToString())}" : null)}");
        /// <summary>
        /// <para>GET /lol-store/v1/skins/{skinId}</para>
        /// </summary>
        [Endpoint("/lol-store/v1/skins/{skinId}")]
        public static Task<LolStoreCatalogItem> GetLolStoreV1SkinsBySkinId([Parameter("skinId", "path")] int skinId)
            => Sender.Request<LolStoreCatalogItem>("get", $"/lol-store/v1/skins/{skinId}");
        /// <summary>
        /// <para>POST /lol-store/v1/skins/{skinId}/purchase</para>
        /// </summary>
        [Endpoint("/lol-store/v1/skins/{skinId}/purchase")]
        public static Task<object> PostLolStoreV1SkinsBySkinIdPurchase([Parameter("skinId", "path")] int skinId, [Parameter("cost", "body")] LolStoreItemCost cost)
            => Sender.Request<object>("post", $"/lol-store/v1/skins/{skinId}/purchase", cost);
        /// <summary>
        /// <para>GET /lol-store/v1/status</para>
        /// </summary>
        [Endpoint("/lol-store/v1/status")]
        public static Task<LolStoreStoreStatus> GetLolStoreV1Status()
            => Sender.Request<LolStoreStoreStatus>("get", $"/lol-store/v1/status");
        /// <summary>
        /// <para>GET /lol-store/v1/wallet</para>
        /// </summary>
        [Endpoint("/lol-store/v1/wallet")]
        public static Task<LolStoreWallet> GetLolStoreV1Wallet()
            => Sender.Request<LolStoreWallet>("get", $"/lol-store/v1/wallet");
        /// <summary>
        /// <para>GET /lol-store/v1/{pageType}</para>
        /// </summary>
        [Endpoint("/lol-store/v1/{pageType}")]
        public static Task<object> GetLolStoreV1ByPageType([Parameter("pageType", "path")] string pageType)
            => Sender.Request<object>("get", $"/lol-store/v1/{pageType}");

        public static string GetURL(string methodName)
        {
            return typeof(LolStore).GetMethod(methodName).GetCustomAttribute<EndpointAttribute>().URL;
        }
    }
}
