//Auto-generated by https://github.com/pipe01/lcu-api-generator
using GlassLCU.API.Models;
using System.Threading.Tasks;
using static GlassLCU.API.GenerationUtils;
using System.Reflection;

namespace GlassLCU.API.Interfaces
{
    public static class LolLoadouts
    {
        /// <summary>
        /// <para>POST /lol-loadouts/v4/loadouts</para>
        /// </summary>
        [Endpoint("/lol-loadouts/v4/loadouts")]
        public static Task<LolLoadoutsScopedLoadout> PostLolLoadoutsV4Loadouts([Parameter("loadout", "body")] LolLoadoutsCreateLoadoutDTO loadout)
            => Sender.Request<LolLoadoutsScopedLoadout>("post", $"/lol-loadouts/v4/loadouts", loadout);
        /// <summary>
        /// <para>GET /lol-loadouts/v4/loadouts/scope/account</para>
        /// </summary>
        [Endpoint("/lol-loadouts/v4/loadouts/scope/account")]
        public static Task<LolLoadoutsScopedLoadout[]> GetLolLoadoutsV4LoadoutsScopeAccount()
            => Sender.Request<LolLoadoutsScopedLoadout[]>("get", $"/lol-loadouts/v4/loadouts/scope/account");
        /// <summary>
        /// <para>GET /lol-loadouts/v4/loadouts/scope/{scope}/{scopeItemId}</para>
        /// </summary>
        [Endpoint("/lol-loadouts/v4/loadouts/scope/{scope}/{scopeItemId}")]
        public static Task<LolLoadoutsScopedLoadout[]> GetLolLoadoutsV4LoadoutsScopeByScopeByScopeItemId([Parameter("scope", "path")] string scope, [Parameter("scopeItemId", "path")] int scopeItemId = default)
            => Sender.Request<LolLoadoutsScopedLoadout[]>("get", $"/lol-loadouts/v4/loadouts/scope/{scope}/{scopeItemId}");
        /// <summary>
        /// <para>DELETE /lol-loadouts/v4/loadouts/{id}</para>
        /// </summary>
        [Endpoint("/lol-loadouts/v4/loadouts/{id}")]
        public static Task DeleteLolLoadoutsV4LoadoutsById([Parameter("id", "path")] string id)
            => Sender.Request("delete", $"/lol-loadouts/v4/loadouts/{id}");
        /// <summary>
        /// <para>PATCH /lol-loadouts/v4/loadouts/{id}</para>
        /// </summary>
        [Endpoint("/lol-loadouts/v4/loadouts/{id}")]
        public static Task<LolLoadoutsScopedLoadout> PatchLolLoadoutsV4LoadoutsById([Parameter("id", "path")] string id, [Parameter("loadout", "body")] LolLoadoutsUpdateLoadoutDTO loadout)
            => Sender.Request<LolLoadoutsScopedLoadout>("patch", $"/lol-loadouts/v4/loadouts/{id}", loadout);
        /// <summary>
        /// <para>PUT /lol-loadouts/v4/loadouts/{id}</para>
        /// </summary>
        [Endpoint("/lol-loadouts/v4/loadouts/{id}")]
        public static Task<LolLoadoutsScopedLoadout> PutLolLoadoutsV4LoadoutsById([Parameter("id", "path")] string id, [Parameter("loadout", "body")] LolLoadoutsUpdateLoadoutDTO loadout)
            => Sender.Request<LolLoadoutsScopedLoadout>("put", $"/lol-loadouts/v4/loadouts/{id}", loadout);
        /// <summary>
        /// <para>GET /lol-loadouts/v4/loadouts/{loadoutId}</para>
        /// </summary>
        [Endpoint("/lol-loadouts/v4/loadouts/{loadoutId}")]
        public static Task<LolLoadoutsScopedLoadout> GetLolLoadoutsV4LoadoutsByLoadoutId([Parameter("loadoutId", "path")] string loadoutId)
            => Sender.Request<LolLoadoutsScopedLoadout>("get", $"/lol-loadouts/v4/loadouts/{loadoutId}");

        public static string GetURL(string methodName)
        {
            return typeof(LolLoadouts).GetMethod(methodName).GetCustomAttribute<EndpointAttribute>().URL;
        }
    }
}
